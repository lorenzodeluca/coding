import java.util.*;

public class DFSExample {
    private Map<Integer, List<Integer>> graph = new HashMap<>();
    private Set<Integer> visited = new HashSet<>();

    // Add edge to the graph
    public void addEdge(int u, int v) {
        graph.computeIfAbsent(u, k -> new ArrayList<>()).add(v);
        graph.computeIfAbsent(v, k -> new ArrayList<>()).add(u); // Remove this line for a directed graph
    }

    // DFS recursive method
    public void dfs(int node) {
        if (visited.contains(node)) return;

        visited.add(node);
        System.out.print(node + " ");

        for (int neighbor : graph.getOrDefault(node, new ArrayList<>())) {
            dfs(neighbor);
        }
    }

    public static void main(String[] args) {
        DFSExample dfsExample = new DFSExample();

        // Build the graph
        dfsExample.addEdge(1, 2);
        dfsExample.addEdge(1, 3);
        dfsExample.addEdge(2, 4);
        dfsExample.addEdge(3, 5);

        // Start DFS from node 1
        System.out.print("DFS traversal: ");
        dfsExample.dfs(1);
    }
}
