import java.util.Arrays;

class Graph {
    int vertices;
    int[][] adjMatrix;

    public Graph(int vertices) {
        this.vertices = vertices;
        adjMatrix = new int[vertices][vertices];

        // Initialize all edges to 0 (no edge)
        for (int[] row : adjMatrix)
            Arrays.fill(row, 0);
    }

    // Add edge to the graph
    public void addEdge(int src, int dest, int weight) {
        adjMatrix[src][dest] = weight;
        // For undirected graph, also add reverse edge:
        // adjMatrix[dest][src] = weight;
    }

    // Dijkstra's algorithm without PriorityQueue
    public void dijkstra(int src) {
        int[] dist = new int[vertices];      // Shortest distances
        boolean[] visited = new boolean[vertices]; // Visited nodes

        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        for (int count = 0; count < vertices - 1; count++) {
            int u = findMinDistance(dist, visited);
            visited[u] = true;

            // Update distances of adjacent vertices
            for (int v = 0; v < vertices; v++) {
                if (!visited[v] &&
                    adjMatrix[u][v] != 0 &&
                    dist[u] != Integer.MAX_VALUE &&
                    dist[u] + adjMatrix[u][v] < dist[v]) {
                    
                    dist[v] = dist[u] + adjMatrix[u][v];
                }
            }
        }

        // Print results
        System.out.println("Shortest distances from node " + src + ":");
        for (int i = 0; i < vertices; i++) {
            System.out.println("To node " + i + " â†’ " + dist[i]);
        }
    }

    // Utility to find the unvisited node with the smallest distance
    private int findMinDistance(int[] dist, boolean[] visited) {
        int min = Integer.MAX_VALUE, minIndex = -1;
        for (int v = 0; v < vertices; v++) {
            if (!visited[v] && dist[v] < min) {
                min = dist[v];
                minIndex = v;
            }
        }
        return minIndex;
    }
}

public class DijkstraWithoutPQ {
    public static void main(String[] args) {
        Graph g = new Graph(6);
        g.addEdge(0, 1, 4);
        g.addEdge(0, 2, 2);
        g.addEdge(1, 2, 5);
        g.addEdge(1, 3, 10);
        g.addEdge(2, 4, 3);
        g.addEdge(4, 3, 4);
        g.addEdge(3, 5, 11);

        g.dijkstra(0); // Source node
    }
}
